# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cg6xU8Z95BSQZicyvFuMpG3uqP00KLJn
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv("/train.csv")
df_test=pd.read_csv("/test.csv")
df_g=pd.read_csv("/gender_submission.csv")

df.describe()

df.info()

del df['Cabin']

df['Survived']

del df['PassengerId']

df.info()

del df['Name']

d={'C':1,'Q':2,'S':3}
df['Embarked']=df['Embarked'].map(d)

df['Ticket']

df.info()

d={'male':0,'female':1}
df['Sex']=df['Sex'].map(d)

df.info()

df['Fare']=df['Fare']*10000

df['Fare']

df['Fare']=df['Fare'].astype(np.int64)

df.info()

df['Age'].describe()

df['Age']=df['Age'].astype(np.int64)

df['Age']

df['Age'].describe()

df=df[df['Age']!=0]

df['Age'].describe()

df.info()

df=df[df['Ticket']!='[^0-9a-zA-Z]']

df.info()

del df['Ticket']

df

df.info()

df_cor=df.corr()

sns.heatmap(df_cor)

df['relatives']=df['SibSp']+df['Parch']

df.info()

d=[df]
for dataset in d:
  dataset.loc[dataset['relatives']> 0 , 'travel']=1
  dataset.loc[dataset['relatives']== 0 , 'travel']=0

df.info()

df['travel']=df['travel'].astype('int64')

df.info()

sns.heatmap(df.corr())

df.describe()

df.info()

param_grid = {
   'bootstrap': [True,False],
    'max_depth': [80, 90, 100, 110],
    'max_features': [2, 3],
    'min_samples_leaf': [3, 4, 5],
    'min_samples_split': [8, 10, 12],
    'n_estimators': [100, 200, 300, 1000]
}

df_test=pd.read_csv("/test.csv")

del df_test['Cabin']
del df_test['PassengerId']
del df_test['Name']
d={'C':1,'Q':2,'S':3}
df_test['Embarked']=df_test['Embarked'].map(d)

d={'male':0,'female':1}
df_test['Sex']=df_test['Sex'].map(d)

df_test.info()

df_test['Fare']=df_test['Fare'].mean()
df_test['Fare']=df_test['Fare']*10000
df_test['Fare']=df_test['Fare'].astype(np.int64)

df_test.info()

del df_test['Ticket']

df_test.info()

del df_test['Age']
df_test['relatives']=df_test['SibSp']+df_test['Parch']
d_t=[df_test]
for dataset in d_t:
  dataset.loc[dataset['relatives']> 0 , 'travel']=1
  dataset.loc[dataset['relatives']== 0 , 'travel']=0
df_test['travel']=df_test['travel'].astype('int64')

df_test.info()

df.info()

from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier

features = ["Pclass", "Sex", "SibSp", "Parch","travel"]
X = pd.get_dummies(df[features])

y=df['Survived']

X_test = pd.get_dummies(df_test[features])

model = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)
model.fit(X, y)
pred = model.predict(X_test)

pred

pred.size

test_data = pd.read_csv("/test.csv")
id=test_data.PassengerId

output = pd.DataFrame({'PassengerId': id, 'Survived': pred})
output.to_csv('my_submission.csv', index=False)
print("Your submission was successfully saved!")

output

